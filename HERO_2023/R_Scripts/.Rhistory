) %>%
filter(!is.na(Mean_Survival_Rate)) -> tree_survival_summary
# Calculate correlation coefficient
correlation_coefficient <- cor(tree_survival_summary$Num_Properties, tree_survival_summary$Mean_Survival_Rate)
# Create the plot
ggplot(tree_survival_summary, aes(x = total_trees_group, y = Mean_Survival_Rate)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
geom_errorbar(aes(ymin = Mean_Survival_Rate - Survival_Rate_StdDev, ymax = Mean_Survival_Rate + Survival_Rate_StdDev), width = 0.4, color = "black", position = position_dodge(0.9)) +
geom_text(aes(label = Num_Properties), vjust = -0.5, position = position_dodge(0.9)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
annotate("text", x = max(tree_survival_summary$total_trees_group), y = max(tree_survival_summary$Mean_Survival_Rate),
label = paste("Correlation =", round(correlation_coefficient, 2)), hjust = 1, vjust = -1) +
labs(x = "Number of Trees", y = "Average Survival Rate") +
theme_minimal()
# Convert total_trees_group to numeric
tree_survival_summary$total_trees_group <- as.numeric(levels(tree_survival_summary$total_trees_group))[tree_survival_summary$total_trees_group]
# Calculate correlation coefficient
correlation_coefficient <- cor(tree_survival_summary$total_trees_group, tree_survival_summary$Mean_Survival_Rate)
# Create the plot
ggplot(tree_survival_summary, aes(x = total_trees_group, y = Mean_Survival_Rate)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
geom_errorbar(aes(ymin = Mean_Survival_Rate - Survival_Rate_StdDev, ymax = Mean_Survival_Rate + Survival_Rate_StdDev), width = 0.4, color = "black", position = position_dodge(0.9)) +
geom_text(aes(label = Num_Properties), vjust = -0.5, position = position_dodge(0.9)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
annotate("text", x = max(tree_survival_summary$total_trees_group), y = max(tree_survival_summary$Mean_Survival_Rate),
label = paste("Correlation =", round(correlation_coefficient, 2)), hjust = 1, vjust = -1) +
labs(x = "Number of Trees", y = "Average Survival Rate") +
theme_minimal()
# Group by the number of trees and calculate the mean survival rate
tree_summary %>%
group_by(total_trees_group = cut(total_trees, breaks = seq(0, max(total_trees) + bin_width, bin_width), include.lowest = TRUE)) %>%
summarise(
Mean_Survival_Rate = mean(survival_rate),
Survival_Rate_StdDev = sd(survival_rate),
Num_Properties = n()
) %>%
filter(!is.na(Mean_Survival_Rate)) -> tree_survival_summary
# Convert total_trees_group to numeric
tree_survival_summary$total_trees_group <- as.numeric(levels(tree_survival_summary$total_trees_group))[tree_survival_summary$total_trees_group]
# Group by the number of trees and calculate the mean survival rate
tree_summary %>%
group_by(total_trees_group = cut(total_trees, breaks = seq(0, max(total_trees) + bin_width, bin_width), include.lowest = TRUE)) %>%
summarise(
Mean_Survival_Rate = mean(survival_rate),
Survival_Rate_StdDev = sd(survival_rate),
Num_Properties = n()
) %>%
filter(!is.na(Mean_Survival_Rate)) -> tree_survival_summary
# Convert total_trees_group to numeric
tree_survival_summary$total_trees_group <- as.numeric(levels(tree_survival_summary$total_trees_group))[tree_survival_summary$total_trees_group]
# Convert total_trees_group to numeric
# Calculate correlation coefficient
correlation_coefficient <- cor(tree_survival_summary$total_trees_group, tree_survival_summary$Mean_Survival_Rate)
# Create the plot
ggplot(tree_survival_summary, aes(x = total_trees_group, y = Mean_Survival_Rate)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
geom_errorbar(aes(ymin = Mean_Survival_Rate - Survival_Rate_StdDev, ymax = Mean_Survival_Rate + Survival_Rate_StdDev), width = 0.4, color = "black", position = position_dodge(0.9)) +
geom_text(aes(label = Num_Properties), vjust = -0.5, position = position_dodge(0.9)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
annotate("text", x = max(tree_survival_summary$total_trees_group), y = max(tree_survival_summary$Mean_Survival_Rate),
label = paste("Correlation =", round(correlation_coefficient, 2)), hjust = 1, vjust = -1) +
labs(x = "Number of Trees", y = "Average Survival Rate") +
theme_minimal()
# Group by the number of trees and calculate the mean survival rate
tree_summary %>%
group_by(total_trees_group = cut(total_trees, breaks = seq(0, max(total_trees) + bin_width, bin_width), include.lowest = TRUE)) %>%
summarise(
Mean_Survival_Rate = mean(survival_rate),
Survival_Rate_StdDev = sd(survival_rate),
Num_Properties = n()
) %>%
filter(!is.na(Mean_Survival_Rate)) -> tree_survival_summary
# Convert total_trees_group to numeric
# Calculate correlation coefficient
correlation_coefficient <- cor(tree_survival_summary$total_trees_group, tree_survival_summary$Mean_Survival_Rate)
# Convert total_trees_group to numeric
tree_survival_summary$total_trees_group <- as.numeric(levels(tree_survival_summary$total_trees_group))[tree_survival_summary$total_trees_group]
# Specify bin width
bin_width <- 3
# Group by the number of trees and calculate the mean survival rate
tree_summary %>%
group_by(total_trees_group = cut(total_trees, breaks = seq(0, max(total_trees) + bin_width, bin_width), include.lowest = TRUE)) %>%
summarise(
Mean_Survival_Rate = mean(survival_rate),
Survival_Rate_StdDev = sd(survival_rate),
Num_Properties = n()
) %>%
filter(!is.na(Mean_Survival_Rate)) -> tree_survival_summary
# Calculate correlation coefficient
correlation_coefficient <- cor(as.numeric(levels(tree_survival_summary$total_trees_group))[tree_survival_summary$total_trees_group], tree_survival_summary$Mean_Survival_Rate)
# Create the plot
ggplot(tree_survival_summary, aes(x = as.numeric(levels(total_trees_group))[total_trees_group], y = Mean_Survival_Rate)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
geom_errorbar(aes(ymin = Mean_Survival_Rate - Survival_Rate_StdDev, ymax = Mean_Survival_Rate + Survival_Rate_StdDev), width = 0.4, color = "black", position = position_dodge(0.9)) +
geom_text(aes(label = Num_Properties), vjust = -0.5, position = position_dodge(0.9)) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
annotate("text", x = max(as.numeric(levels(tree_survival_summary$total_trees_group))[tree_survival_summary$total_trees_group]), y = max(tree_survival_summary$Mean_Survival_Rate),
label = paste("Correlation =", round(correlation_coefficient, 2)), hjust = 1, vjust = -1) +
labs(x = "Number of Trees", y = "Average Survival Rate") +
theme_minimal()
# Specify bin width
bin_width <- 3
# Convert total_trees_group to numeric
#PLAN
#Take last 2 digits from Datayear_F
pkgs <- c("dplyr", "ggplot2", "tidyr", "readxl")
sapply(pkgs, require, character.only = T)
alltreedata <- read.csv("X:\\Asian Longhorned Beetle\\HERO_2023\\Fall_DCR_Research\\Dataset_for_final_analysis_fall23_copied_LU_ST.csv")
alltreedata <- read.csv("Y:\\Asian Longhorned Beetle\\HERO_2023\\Fall_DCR_Research\\Dataset_for_final_analysis_fall23_copied_LU_ST.csv")
alltreedata <- read.csv("Y:\\Asian Longhorned Beetle\\HERO_2023\\Fall_DCR_Research\\R_Scripts\\Dataset_for_final_analysis_fall23_copied_LU_ST.csv")
alltreedata <- read.csv("Y:\\Asian Longhorned Beetle\\HERO_2023\\Fall_DCR_Research\\R_Scripts\\Dataset_for_final_analysis_fall23.csv")
#PLAN
#Take last 2 digits from Datayear_F
pkgs <- c("dplyr", "ggplot2", "tidyr", "readxl")
install.packages(pkgs)
install.packages(pkgs)
sapply(pkgs, require, character.only = T)
alltreedata <- read.csv("Y:\\Asian Longhorned Beetle\\HERO_2023\\Fall_DCR_Research\\R_Scripts\\Dataset_for_final_analysis_fall23.csv")
alltreedata <- read.csv("Y:\\Asian Longhorned Beetle\\HERO_2023\\Fall_DCR_Research\\R_Scripts\\Dataset_for_final_analysis_fall23.csv")
alltreedata <- read.csv("Y:\\Asian Longhorned Beetle\\HERO_2023\\Fall_DCR_Research\\R_Scripts\\Dataset_for_final_analysis_fall23.csv")
# This function should return only "Alive", "Removed", "Unknown", "Stump", "Standing Dead", and " ".
unique(alltreedata$Mortality_2023)
